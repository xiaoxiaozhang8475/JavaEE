<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd ">
    
    <!-- 配置创建UserDAOImpl的实例 -->
	<bean id="userDAO" class="com.shw.dao.UserDAOImpl">	 
	</bean>
	
	<!-- 配置创建UserBizImpl的实例 -->
	<bean id="userBiz" class="com.shw.biz.UserBizImpl">
	    <!-- 依赖注入数据访问层组件 -->
		<property name="userDAO" ref="userDAO" />
	</bean>
	
	<!-- 定义日志通知，将日志切面交给Spring容器管理 -->
	<bean id="allLogAdvice" class="com.shw.aop.AllLogAdvice"></bean>	
	
	<!-- 进行aop配置 -->
	<aop:config>	
	
	  <!-- 配置日志切面 -->
	  <aop:aspect id="logaop" ref="allLogAdvice">	 	  
	    <!-- 定义切入点，切入点采用正则表达式execution(* com.shw.biz.UserBiz.*(..))，
	                       含义是对com.shw.biz.UserBiz中的所有方法，都进行拦截	 -->   
	    <aop:pointcut id="logpointcut" expression="execution(* com.shw.biz.UserBiz.*(..))" />
	    	    
	    <!-- 将LogAdvice日志通知中的myBeforeAdvice方法指定为前置通知 -->
	    <aop:before method="myBeforeAdvice" pointcut-ref="logpointcut"/>
	    
	    <!-- 将LogAdvice日志通知中的myAfterReturnAdvice方法指定为后置通知 -->
	    <aop:after-returning method="myAfterReturnAdvice" pointcut-ref="logpointcut"/>
	    
	    <!-- 将LogAdvice日志通知中的方法指定为异常通知 -->
	    <aop:after-throwing method="myThrowingAdvice" pointcut-ref="logpointcut" throwing="e" />
	    
	    <!-- 将LogAdvice日志通知中的方法指定为环绕通知 -->
	    <aop:around method="myAroundAdvice" pointcut-ref="logpointcut"/>
	  </aop:aspect>
	</aop:config>
	
</beans>